/* automatically generated by rust-bindgen */

pub type __int128_t = ::libc::c_void;
pub type __uint128_t = ::libc::c_void;
pub type __builtin_va_list = [__va_list_tag; 1us];
pub type size_t = ::libc::c_ulong;
pub type __u_char = ::libc::c_uchar;
pub type __u_short = ::libc::c_ushort;
pub type __u_int = ::libc::c_uint;
pub type __u_long = ::libc::c_ulong;
pub type __int8_t = ::libc::c_char;
pub type __uint8_t = ::libc::c_uchar;
pub type __int16_t = ::libc::c_short;
pub type __uint16_t = ::libc::c_ushort;
pub type __int32_t = ::libc::c_int;
pub type __uint32_t = ::libc::c_uint;
pub type __int64_t = ::libc::c_long;
pub type __uint64_t = ::libc::c_ulong;
pub type __quad_t = ::libc::c_long;
pub type __u_quad_t = ::libc::c_ulong;
pub type __dev_t = ::libc::c_ulong;
pub type __uid_t = ::libc::c_uint;
pub type __gid_t = ::libc::c_uint;
pub type __ino_t = ::libc::c_ulong;
pub type __ino64_t = ::libc::c_ulong;
pub type __mode_t = ::libc::c_uint;
pub type __nlink_t = ::libc::c_ulong;
pub type __off_t = ::libc::c_long;
pub type __off64_t = ::libc::c_long;
pub type __pid_t = ::libc::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed1 {
    pub __val: [::libc::c_int; 2us],
}
impl ::std::default::Default for Struct_Unnamed1 {
    fn default() -> Struct_Unnamed1 { unsafe { ::std::mem::zeroed() } }
}
pub type __fsid_t = Struct_Unnamed1;
pub type __clock_t = ::libc::c_long;
pub type __rlim_t = ::libc::c_ulong;
pub type __rlim64_t = ::libc::c_ulong;
pub type __id_t = ::libc::c_uint;
pub type __time_t = ::libc::c_long;
pub type __useconds_t = ::libc::c_uint;
pub type __suseconds_t = ::libc::c_long;
pub type __daddr_t = ::libc::c_int;
pub type __key_t = ::libc::c_int;
pub type __clockid_t = ::libc::c_int;
pub type __timer_t = *mut ::libc::c_void;
pub type __blksize_t = ::libc::c_long;
pub type __blkcnt_t = ::libc::c_long;
pub type __blkcnt64_t = ::libc::c_long;
pub type __fsblkcnt_t = ::libc::c_ulong;
pub type __fsblkcnt64_t = ::libc::c_ulong;
pub type __fsfilcnt_t = ::libc::c_ulong;
pub type __fsfilcnt64_t = ::libc::c_ulong;
pub type __fsword_t = ::libc::c_long;
pub type __ssize_t = ::libc::c_long;
pub type __syscall_slong_t = ::libc::c_long;
pub type __syscall_ulong_t = ::libc::c_ulong;
pub type __loff_t = __off64_t;
pub type __qaddr_t = *mut __quad_t;
pub type __caddr_t = *mut ::libc::c_char;
pub type __intptr_t = ::libc::c_long;
pub type __socklen_t = ::libc::c_uint;
pub type FILE = Struct__IO_FILE;
pub type __FILE = Struct__IO_FILE;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed2 {
    pub __count: ::libc::c_int,
    pub __value: Union_Unnamed3,
}
impl ::std::default::Default for Struct_Unnamed2 {
    fn default() -> Struct_Unnamed2 { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed3 {
    pub _bindgen_data_: [u32; 1us],
}
impl Union_Unnamed3 {
    pub unsafe fn __wch(&mut self) -> *mut ::libc::c_uint {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn __wchb(&mut self) -> *mut [::libc::c_char; 4us] {
        ::std::mem::transmute(&self._bindgen_data_)
    }
}
impl ::std::default::Default for Union_Unnamed3 {
    fn default() -> Union_Unnamed3 { unsafe { ::std::mem::zeroed() } }
}
pub type __mbstate_t = Struct_Unnamed2;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed4 {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
impl ::std::default::Default for Struct_Unnamed4 {
    fn default() -> Struct_Unnamed4 { unsafe { ::std::mem::zeroed() } }
}
pub type _G_fpos_t = Struct_Unnamed4;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed5 {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
impl ::std::default::Default for Struct_Unnamed5 {
    fn default() -> Struct_Unnamed5 { unsafe { ::std::mem::zeroed() } }
}
pub type _G_fpos64_t = Struct_Unnamed5;
pub type __gnuc_va_list = __builtin_va_list;
pub enum Struct__IO_jump_t { }
pub type _IO_lock_t = ::libc::c_void;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__IO_marker {
    pub _next: *mut Struct__IO_marker,
    pub _sbuf: *mut Struct__IO_FILE,
    pub _pos: ::libc::c_int,
}
impl ::std::default::Default for Struct__IO_marker {
    fn default() -> Struct__IO_marker { unsafe { ::std::mem::zeroed() } }
}
pub type Enum___codecvt_result = ::libc::c_uint;
pub const __codecvt_ok: ::libc::c_uint = 0;
pub const __codecvt_partial: ::libc::c_uint = 1;
pub const __codecvt_error: ::libc::c_uint = 2;
pub const __codecvt_noconv: ::libc::c_uint = 3;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__IO_FILE {
    pub _flags: ::libc::c_int,
    pub _IO_read_ptr: *mut ::libc::c_char,
    pub _IO_read_end: *mut ::libc::c_char,
    pub _IO_read_base: *mut ::libc::c_char,
    pub _IO_write_base: *mut ::libc::c_char,
    pub _IO_write_ptr: *mut ::libc::c_char,
    pub _IO_write_end: *mut ::libc::c_char,
    pub _IO_buf_base: *mut ::libc::c_char,
    pub _IO_buf_end: *mut ::libc::c_char,
    pub _IO_save_base: *mut ::libc::c_char,
    pub _IO_backup_base: *mut ::libc::c_char,
    pub _IO_save_end: *mut ::libc::c_char,
    pub _markers: *mut Struct__IO_marker,
    pub _chain: *mut Struct__IO_FILE,
    pub _fileno: ::libc::c_int,
    pub _flags2: ::libc::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::libc::c_ushort,
    pub _vtable_offset: ::libc::c_char,
    pub _shortbuf: [::libc::c_char; 1us],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub __pad1: *mut ::libc::c_void,
    pub __pad2: *mut ::libc::c_void,
    pub __pad3: *mut ::libc::c_void,
    pub __pad4: *mut ::libc::c_void,
    pub __pad5: size_t,
    pub _mode: ::libc::c_int,
    pub _unused2: [::libc::c_char; 20us],
}
impl ::std::default::Default for Struct__IO_FILE {
    fn default() -> Struct__IO_FILE { unsafe { ::std::mem::zeroed() } }
}
pub type _IO_FILE = Struct__IO_FILE;
pub enum Struct__IO_FILE_plus { }
pub type __io_read_fn =
    extern "C" fn
        (__cookie: *mut ::libc::c_void, __buf: *mut ::libc::c_char,
         __nbytes: size_t) -> __ssize_t;
pub type __io_write_fn =
    extern "C" fn
        (__cookie: *mut ::libc::c_void, __buf: *const ::libc::c_char,
         __n: size_t) -> __ssize_t;
pub type __io_seek_fn =
    extern "C" fn
        (__cookie: *mut ::libc::c_void, __pos: *mut __off64_t,
         __w: ::libc::c_int) -> ::libc::c_int;
pub type __io_close_fn =
    extern "C" fn(__cookie: *mut ::libc::c_void) -> ::libc::c_int;
pub type va_list = __gnuc_va_list;
pub type off_t = __off_t;
pub type ssize_t = __ssize_t;
pub type fpos_t = _G_fpos_t;
pub type int8_t = ::libc::c_char;
pub type int16_t = ::libc::c_short;
pub type int32_t = ::libc::c_int;
pub type int64_t = ::libc::c_long;
pub type uint8_t = ::libc::c_uchar;
pub type uint16_t = ::libc::c_ushort;
pub type uint32_t = ::libc::c_uint;
pub type uint64_t = ::libc::c_ulong;
pub type int_least8_t = ::libc::c_char;
pub type int_least16_t = ::libc::c_short;
pub type int_least32_t = ::libc::c_int;
pub type int_least64_t = ::libc::c_long;
pub type uint_least8_t = ::libc::c_uchar;
pub type uint_least16_t = ::libc::c_ushort;
pub type uint_least32_t = ::libc::c_uint;
pub type uint_least64_t = ::libc::c_ulong;
pub type int_fast8_t = ::libc::c_char;
pub type int_fast16_t = ::libc::c_long;
pub type int_fast32_t = ::libc::c_long;
pub type int_fast64_t = ::libc::c_long;
pub type uint_fast8_t = ::libc::c_uchar;
pub type uint_fast16_t = ::libc::c_ulong;
pub type uint_fast32_t = ::libc::c_ulong;
pub type uint_fast64_t = ::libc::c_ulong;
pub type intptr_t = ::libc::c_long;
pub type uintptr_t = ::libc::c_ulong;
pub type intmax_t = ::libc::c_long;
pub type uintmax_t = ::libc::c_ulong;
pub type __gwchar_t = ::libc::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed6 {
    pub quot: ::libc::c_long,
    pub rem: ::libc::c_long,
}
impl ::std::default::Default for Struct_Unnamed6 {
    fn default() -> Struct_Unnamed6 { unsafe { ::std::mem::zeroed() } }
}
pub type imaxdiv_t = Struct_Unnamed6;
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type time_t = __time_t;
pub type clockid_t = __clockid_t;
pub type timer_t = __timer_t;
pub type ulong = ::libc::c_ulong;
pub type ushort = ::libc::c_ushort;
pub type _uint = ::libc::c_uint;
pub type u_int8_t = ::libc::c_uchar;
pub type u_int16_t = ::libc::c_ushort;
pub type u_int32_t = ::libc::c_uint;
pub type u_int64_t = ::libc::c_ulong;
pub type register_t = ::libc::c_long;
pub type __sig_atomic_t = ::libc::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed7 {
    pub __val: [::libc::c_ulong; 16us],
}
impl ::std::default::Default for Struct_Unnamed7 {
    fn default() -> Struct_Unnamed7 { unsafe { ::std::mem::zeroed() } }
}
pub type __sigset_t = Struct_Unnamed7;
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
impl ::std::default::Default for Struct_timespec {
    fn default() -> Struct_timespec { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
impl ::std::default::Default for Struct_timeval {
    fn default() -> Struct_timeval { unsafe { ::std::mem::zeroed() } }
}
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::libc::c_long;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed8 {
    pub __fds_bits: [__fd_mask; 16us],
}
impl ::std::default::Default for Struct_Unnamed8 {
    fn default() -> Struct_Unnamed8 { unsafe { ::std::mem::zeroed() } }
}
pub type fd_set = Struct_Unnamed8;
pub type fd_mask = __fd_mask;
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
pub type pthread_t = ::libc::c_ulong;
#[repr(C)]
#[derive(Copy)]
pub struct Union_pthread_attr_t {
    pub _bindgen_data_: [u64; 7us],
}
impl Union_pthread_attr_t {
    pub unsafe fn __size(&mut self) -> *mut [::libc::c_char; 56us] {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn __align(&mut self) -> *mut ::libc::c_long {
        ::std::mem::transmute(&self._bindgen_data_)
    }
}
impl ::std::default::Default for Union_pthread_attr_t {
    fn default() -> Union_pthread_attr_t { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_attr_t = Union_pthread_attr_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct___pthread_internal_list {
    pub __prev: *mut Struct___pthread_internal_list,
    pub __next: *mut Struct___pthread_internal_list,
}
impl ::std::default::Default for Struct___pthread_internal_list {
    fn default() -> Struct___pthread_internal_list {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type __pthread_list_t = Struct___pthread_internal_list;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed9 {
    pub _bindgen_data_: [u64; 5us],
}
impl Union_Unnamed9 {
    pub unsafe fn __data(&mut self) -> *mut Struct___pthread_mutex_s {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn __size(&mut self) -> *mut [::libc::c_char; 40us] {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn __align(&mut self) -> *mut ::libc::c_long {
        ::std::mem::transmute(&self._bindgen_data_)
    }
}
impl ::std::default::Default for Union_Unnamed9 {
    fn default() -> Union_Unnamed9 { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___pthread_mutex_s {
    pub __lock: ::libc::c_int,
    pub __count: ::libc::c_uint,
    pub __owner: ::libc::c_int,
    pub __nusers: ::libc::c_uint,
    pub __kind: ::libc::c_int,
    pub __spins: ::libc::c_short,
    pub __elision: ::libc::c_short,
    pub __list: __pthread_list_t,
}
impl ::std::default::Default for Struct___pthread_mutex_s {
    fn default() -> Struct___pthread_mutex_s {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type pthread_mutex_t = Union_Unnamed9;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed10 {
    pub _bindgen_data_: [u32; 1us],
}
impl Union_Unnamed10 {
    pub unsafe fn __size(&mut self) -> *mut [::libc::c_char; 4us] {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn __align(&mut self) -> *mut ::libc::c_int {
        ::std::mem::transmute(&self._bindgen_data_)
    }
}
impl ::std::default::Default for Union_Unnamed10 {
    fn default() -> Union_Unnamed10 { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_mutexattr_t = Union_Unnamed10;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed11 {
    pub _bindgen_data_: [u64; 6us],
}
impl Union_Unnamed11 {
    pub unsafe fn __data(&mut self) -> *mut Struct_Unnamed12 {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn __size(&mut self) -> *mut [::libc::c_char; 48us] {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn __align(&mut self) -> *mut ::libc::c_longlong {
        ::std::mem::transmute(&self._bindgen_data_)
    }
}
impl ::std::default::Default for Union_Unnamed11 {
    fn default() -> Union_Unnamed11 { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed12 {
    pub __lock: ::libc::c_int,
    pub __futex: ::libc::c_uint,
    pub __total_seq: ::libc::c_ulonglong,
    pub __wakeup_seq: ::libc::c_ulonglong,
    pub __woken_seq: ::libc::c_ulonglong,
    pub __mutex: *mut ::libc::c_void,
    pub __nwaiters: ::libc::c_uint,
    pub __broadcast_seq: ::libc::c_uint,
}
impl ::std::default::Default for Struct_Unnamed12 {
    fn default() -> Struct_Unnamed12 { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_cond_t = Union_Unnamed11;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed13 {
    pub _bindgen_data_: [u32; 1us],
}
impl Union_Unnamed13 {
    pub unsafe fn __size(&mut self) -> *mut [::libc::c_char; 4us] {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn __align(&mut self) -> *mut ::libc::c_int {
        ::std::mem::transmute(&self._bindgen_data_)
    }
}
impl ::std::default::Default for Union_Unnamed13 {
    fn default() -> Union_Unnamed13 { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_condattr_t = Union_Unnamed13;
pub type pthread_key_t = ::libc::c_uint;
pub type pthread_once_t = ::libc::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed14 {
    pub _bindgen_data_: [u64; 7us],
}
impl Union_Unnamed14 {
    pub unsafe fn __data(&mut self) -> *mut Struct_Unnamed15 {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn __size(&mut self) -> *mut [::libc::c_char; 56us] {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn __align(&mut self) -> *mut ::libc::c_long {
        ::std::mem::transmute(&self._bindgen_data_)
    }
}
impl ::std::default::Default for Union_Unnamed14 {
    fn default() -> Union_Unnamed14 { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed15 {
    pub __lock: ::libc::c_int,
    pub __nr_readers: ::libc::c_uint,
    pub __readers_wakeup: ::libc::c_uint,
    pub __writer_wakeup: ::libc::c_uint,
    pub __nr_readers_queued: ::libc::c_uint,
    pub __nr_writers_queued: ::libc::c_uint,
    pub __writer: ::libc::c_int,
    pub __shared: ::libc::c_int,
    pub __pad1: ::libc::c_ulong,
    pub __pad2: ::libc::c_ulong,
    pub __flags: ::libc::c_uint,
}
impl ::std::default::Default for Struct_Unnamed15 {
    fn default() -> Struct_Unnamed15 { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_rwlock_t = Union_Unnamed14;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed16 {
    pub _bindgen_data_: [u64; 1us],
}
impl Union_Unnamed16 {
    pub unsafe fn __size(&mut self) -> *mut [::libc::c_char; 8us] {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn __align(&mut self) -> *mut ::libc::c_long {
        ::std::mem::transmute(&self._bindgen_data_)
    }
}
impl ::std::default::Default for Union_Unnamed16 {
    fn default() -> Union_Unnamed16 { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_rwlockattr_t = Union_Unnamed16;
pub type pthread_spinlock_t = ::libc::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed17 {
    pub _bindgen_data_: [u64; 4us],
}
impl Union_Unnamed17 {
    pub unsafe fn __size(&mut self) -> *mut [::libc::c_char; 32us] {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn __align(&mut self) -> *mut ::libc::c_long {
        ::std::mem::transmute(&self._bindgen_data_)
    }
}
impl ::std::default::Default for Union_Unnamed17 {
    fn default() -> Union_Unnamed17 { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_barrier_t = Union_Unnamed17;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed18 {
    pub _bindgen_data_: [u32; 1us],
}
impl Union_Unnamed18 {
    pub unsafe fn __size(&mut self) -> *mut [::libc::c_char; 4us] {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn __align(&mut self) -> *mut ::libc::c_int {
        ::std::mem::transmute(&self._bindgen_data_)
    }
}
impl ::std::default::Default for Union_Unnamed18 {
    fn default() -> Union_Unnamed18 { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_barrierattr_t = Union_Unnamed18;
pub type Enum_rd_kafka_type_t = ::libc::c_uint;
pub const RD_KAFKA_PRODUCER: ::libc::c_uint = 0;
pub const RD_KAFKA_CONSUMER: ::libc::c_uint = 1;
pub type rd_kafka_type_t = Enum_rd_kafka_type_t;
pub enum Struct_rd_kafka_s { }
pub type rd_kafka_t = Struct_rd_kafka_s;
pub enum Struct_rd_kafka_topic_s { }
pub type rd_kafka_topic_t = Struct_rd_kafka_topic_s;
pub enum Struct_rd_kafka_conf_s { }
pub type rd_kafka_conf_t = Struct_rd_kafka_conf_s;
pub enum Struct_rd_kafka_topic_conf_s { }
pub type rd_kafka_topic_conf_t = Struct_rd_kafka_topic_conf_s;
pub enum Struct_rd_kafka_queue_s { }
pub type rd_kafka_queue_t = Struct_rd_kafka_queue_s;
pub type Enum_Unnamed19 = ::libc::c_int;
pub const RD_KAFKA_RESP_ERR__BEGIN: ::libc::c_int = -200;
pub const RD_KAFKA_RESP_ERR__BAD_MSG: ::libc::c_int = -199;
pub const RD_KAFKA_RESP_ERR__BAD_COMPRESSION: ::libc::c_int = -198;
pub const RD_KAFKA_RESP_ERR__DESTROY: ::libc::c_int = -197;
pub const RD_KAFKA_RESP_ERR__FAIL: ::libc::c_int = -196;
pub const RD_KAFKA_RESP_ERR__TRANSPORT: ::libc::c_int = -195;
pub const RD_KAFKA_RESP_ERR__CRIT_SYS_RESOURCE: ::libc::c_int = -194;
pub const RD_KAFKA_RESP_ERR__RESOLVE: ::libc::c_int = -193;
pub const RD_KAFKA_RESP_ERR__MSG_TIMED_OUT: ::libc::c_int = -192;
pub const RD_KAFKA_RESP_ERR__PARTITION_EOF: ::libc::c_int = -191;
pub const RD_KAFKA_RESP_ERR__UNKNOWN_PARTITION: ::libc::c_int = -190;
pub const RD_KAFKA_RESP_ERR__FS: ::libc::c_int = -189;
pub const RD_KAFKA_RESP_ERR__UNKNOWN_TOPIC: ::libc::c_int = -188;
pub const RD_KAFKA_RESP_ERR__ALL_BROKERS_DOWN: ::libc::c_int = -187;
pub const RD_KAFKA_RESP_ERR__INVALID_ARG: ::libc::c_int = -186;
pub const RD_KAFKA_RESP_ERR__TIMED_OUT: ::libc::c_int = -185;
pub const RD_KAFKA_RESP_ERR__QUEUE_FULL: ::libc::c_int = -184;
pub const RD_KAFKA_RESP_ERR__ISR_INSUFF: ::libc::c_int = -183;
pub const RD_KAFKA_RESP_ERR__END: ::libc::c_int = -100;
pub const RD_KAFKA_RESP_ERR_UNKNOWN: ::libc::c_int = -1;
pub const RD_KAFKA_RESP_ERR_NO_ERROR: ::libc::c_int = 0;
pub const RD_KAFKA_RESP_ERR_OFFSET_OUT_OF_RANGE: ::libc::c_int = 1;
pub const RD_KAFKA_RESP_ERR_INVALID_MSG: ::libc::c_int = 2;
pub const RD_KAFKA_RESP_ERR_UNKNOWN_TOPIC_OR_PART: ::libc::c_int = 3;
pub const RD_KAFKA_RESP_ERR_INVALID_MSG_SIZE: ::libc::c_int = 4;
pub const RD_KAFKA_RESP_ERR_LEADER_NOT_AVAILABLE: ::libc::c_int = 5;
pub const RD_KAFKA_RESP_ERR_NOT_LEADER_FOR_PARTITION: ::libc::c_int = 6;
pub const RD_KAFKA_RESP_ERR_REQUEST_TIMED_OUT: ::libc::c_int = 7;
pub const RD_KAFKA_RESP_ERR_BROKER_NOT_AVAILABLE: ::libc::c_int = 8;
pub const RD_KAFKA_RESP_ERR_REPLICA_NOT_AVAILABLE: ::libc::c_int = 9;
pub const RD_KAFKA_RESP_ERR_MSG_SIZE_TOO_LARGE: ::libc::c_int = 10;
pub const RD_KAFKA_RESP_ERR_STALE_CTRL_EPOCH: ::libc::c_int = 11;
pub const RD_KAFKA_RESP_ERR_OFFSET_METADATA_TOO_LARGE: ::libc::c_int = 12;
pub type rd_kafka_resp_err_t = Enum_Unnamed19;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rd_kafka_message_s {
    pub err: rd_kafka_resp_err_t,
    pub rkt: *mut rd_kafka_topic_t,
    pub partition: int32_t,
    pub payload: *mut ::libc::c_void,
    pub len: size_t,
    pub key: *mut ::libc::c_void,
    pub key_len: size_t,
    pub offset: int64_t,
    pub _private: *mut ::libc::c_void,
}
impl ::std::default::Default for Struct_rd_kafka_message_s {
    fn default() -> Struct_rd_kafka_message_s {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type rd_kafka_message_t = Struct_rd_kafka_message_s;
pub type Enum_Unnamed20 = ::libc::c_int;
pub const RD_KAFKA_CONF_UNKNOWN: ::libc::c_int = -2;
pub const RD_KAFKA_CONF_INVALID: ::libc::c_int = -1;
pub const RD_KAFKA_CONF_OK: ::libc::c_int = 0;
pub type rd_kafka_conf_res_t = Enum_Unnamed20;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rd_kafka_metadata_broker {
    pub id: int32_t,
    pub host: *mut ::libc::c_char,
    pub port: ::libc::c_int,
}
impl ::std::default::Default for Struct_rd_kafka_metadata_broker {
    fn default() -> Struct_rd_kafka_metadata_broker {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type rd_kafka_metadata_broker_t = Struct_rd_kafka_metadata_broker;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rd_kafka_metadata_partition {
    pub id: int32_t,
    pub err: rd_kafka_resp_err_t,
    pub leader: int32_t,
    pub replica_cnt: ::libc::c_int,
    pub replicas: *mut int32_t,
    pub isr_cnt: ::libc::c_int,
    pub isrs: *mut int32_t,
}
impl ::std::default::Default for Struct_rd_kafka_metadata_partition {
    fn default() -> Struct_rd_kafka_metadata_partition {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type rd_kafka_metadata_partition_t = Struct_rd_kafka_metadata_partition;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rd_kafka_metadata_topic {
    pub topic: *mut ::libc::c_char,
    pub partition_cnt: ::libc::c_int,
    pub partitions: *mut Struct_rd_kafka_metadata_partition,
    pub err: rd_kafka_resp_err_t,
}
impl ::std::default::Default for Struct_rd_kafka_metadata_topic {
    fn default() -> Struct_rd_kafka_metadata_topic {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type rd_kafka_metadata_topic_t = Struct_rd_kafka_metadata_topic;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rd_kafka_metadata {
    pub broker_cnt: ::libc::c_int,
    pub brokers: *mut Struct_rd_kafka_metadata_broker,
    pub topic_cnt: ::libc::c_int,
    pub topics: *mut Struct_rd_kafka_metadata_topic,
    pub orig_broker_id: int32_t,
    pub orig_broker_name: *mut ::libc::c_char,
}
impl ::std::default::Default for Struct_rd_kafka_metadata {
    fn default() -> Struct_rd_kafka_metadata {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type rd_kafka_metadata_t = Struct_rd_kafka_metadata;
pub type __va_list_tag = Struct___va_list_tag;
#[repr(C)]
#[derive(Copy)]
pub struct Struct___va_list_tag {
    pub gp_offset: ::libc::c_uint,
    pub fp_offset: ::libc::c_uint,
    pub overflow_arg_area: *mut ::libc::c_void,
    pub reg_save_area: *mut ::libc::c_void,
}
impl ::std::default::Default for Struct___va_list_tag {
    fn default() -> Struct___va_list_tag { unsafe { ::std::mem::zeroed() } }
}
extern "C" {
    pub static mut _IO_2_1_stdin_: Struct__IO_FILE_plus;
    pub static mut _IO_2_1_stdout_: Struct__IO_FILE_plus;
    pub static mut _IO_2_1_stderr_: Struct__IO_FILE_plus;
    pub static mut stdin: *mut Struct__IO_FILE;
    pub static mut stdout: *mut Struct__IO_FILE;
    pub static mut stderr: *mut Struct__IO_FILE;
    pub static mut sys_nerr: ::libc::c_int;
    pub static mut sys_errlist: *const *const ::libc::c_char;
}
extern "C" {
    pub fn __underflow(arg1: *mut _IO_FILE) -> ::libc::c_int;
    pub fn __uflow(arg1: *mut _IO_FILE) -> ::libc::c_int;
    pub fn __overflow(arg1: *mut _IO_FILE, arg2: ::libc::c_int)
     -> ::libc::c_int;
    pub fn _IO_getc(__fp: *mut _IO_FILE) -> ::libc::c_int;
    pub fn _IO_putc(__c: ::libc::c_int, __fp: *mut _IO_FILE) -> ::libc::c_int;
    pub fn _IO_feof(__fp: *mut _IO_FILE) -> ::libc::c_int;
    pub fn _IO_ferror(__fp: *mut _IO_FILE) -> ::libc::c_int;
    pub fn _IO_peekc_locked(__fp: *mut _IO_FILE) -> ::libc::c_int;
    pub fn _IO_flockfile(arg1: *mut _IO_FILE) -> ();
    pub fn _IO_funlockfile(arg1: *mut _IO_FILE) -> ();
    pub fn _IO_ftrylockfile(arg1: *mut _IO_FILE) -> ::libc::c_int;
    pub fn _IO_vfscanf(arg1: *mut _IO_FILE, arg2: *const ::libc::c_char,
                       arg3: __gnuc_va_list, arg4: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn _IO_vfprintf(arg1: *mut _IO_FILE, arg2: *const ::libc::c_char,
                        arg3: __gnuc_va_list) -> ::libc::c_int;
    pub fn _IO_padn(arg1: *mut _IO_FILE, arg2: ::libc::c_int, arg3: __ssize_t)
     -> __ssize_t;
    pub fn _IO_sgetn(arg1: *mut _IO_FILE, arg2: *mut ::libc::c_void,
                     arg3: size_t) -> size_t;
    pub fn _IO_seekoff(arg1: *mut _IO_FILE, arg2: __off64_t,
                       arg3: ::libc::c_int, arg4: ::libc::c_int) -> __off64_t;
    pub fn _IO_seekpos(arg1: *mut _IO_FILE, arg2: __off64_t,
                       arg3: ::libc::c_int) -> __off64_t;
    pub fn _IO_free_backup_area(arg1: *mut _IO_FILE) -> ();
    pub fn remove(__filename: *const ::libc::c_char) -> ::libc::c_int;
    pub fn rename(__old: *const ::libc::c_char, __new: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn renameat(__oldfd: ::libc::c_int, __old: *const ::libc::c_char,
                    __newfd: ::libc::c_int, __new: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn tmpfile() -> *mut FILE;
    pub fn tmpnam(__s: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn tmpnam_r(__s: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn tempnam(__dir: *const ::libc::c_char, __pfx: *const ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn fclose(__stream: *mut FILE) -> ::libc::c_int;
    pub fn fflush(__stream: *mut FILE) -> ::libc::c_int;
    pub fn fflush_unlocked(__stream: *mut FILE) -> ::libc::c_int;
    pub fn fopen(__filename: *const ::libc::c_char,
                 __modes: *const ::libc::c_char) -> *mut FILE;
    pub fn freopen(__filename: *const ::libc::c_char,
                   __modes: *const ::libc::c_char, __stream: *mut FILE)
     -> *mut FILE;
    pub fn fdopen(__fd: ::libc::c_int, __modes: *const ::libc::c_char)
     -> *mut FILE;
    pub fn fmemopen(__s: *mut ::libc::c_void, __len: size_t,
                    __modes: *const ::libc::c_char) -> *mut FILE;
    pub fn open_memstream(__bufloc: *mut *mut ::libc::c_char,
                          __sizeloc: *mut size_t) -> *mut FILE;
    pub fn setbuf(__stream: *mut FILE, __buf: *mut ::libc::c_char) -> ();
    pub fn setvbuf(__stream: *mut FILE, __buf: *mut ::libc::c_char,
                   __modes: ::libc::c_int, __n: size_t) -> ::libc::c_int;
    pub fn setbuffer(__stream: *mut FILE, __buf: *mut ::libc::c_char,
                     __size: size_t) -> ();
    pub fn setlinebuf(__stream: *mut FILE) -> ();
    pub fn fprintf(__stream: *mut FILE, __format: *const ::libc::c_char, ...)
     -> ::libc::c_int;
    pub fn printf(__format: *const ::libc::c_char, ...) -> ::libc::c_int;
    pub fn sprintf(__s: *mut ::libc::c_char,
                   __format: *const ::libc::c_char, ...) -> ::libc::c_int;
    pub fn vfprintf(__s: *mut FILE, __format: *const ::libc::c_char,
                    __arg: __gnuc_va_list) -> ::libc::c_int;
    pub fn vprintf(__format: *const ::libc::c_char, __arg: __gnuc_va_list)
     -> ::libc::c_int;
    pub fn vsprintf(__s: *mut ::libc::c_char, __format: *const ::libc::c_char,
                    __arg: __gnuc_va_list) -> ::libc::c_int;
    pub fn snprintf(__s: *mut ::libc::c_char, __maxlen: size_t,
                    __format: *const ::libc::c_char, ...) -> ::libc::c_int;
    pub fn vsnprintf(__s: *mut ::libc::c_char, __maxlen: size_t,
                     __format: *const ::libc::c_char, __arg: __gnuc_va_list)
     -> ::libc::c_int;
    pub fn vdprintf(__fd: ::libc::c_int, __fmt: *const ::libc::c_char,
                    __arg: __gnuc_va_list) -> ::libc::c_int;
    pub fn dprintf(__fd: ::libc::c_int, __fmt: *const ::libc::c_char, ...)
     -> ::libc::c_int;
    pub fn fscanf(__stream: *mut FILE, __format: *const ::libc::c_char, ...)
     -> ::libc::c_int;
    pub fn scanf(__format: *const ::libc::c_char, ...) -> ::libc::c_int;
    pub fn sscanf(__s: *const ::libc::c_char,
                  __format: *const ::libc::c_char, ...) -> ::libc::c_int;
    pub fn vfscanf(__s: *mut FILE, __format: *const ::libc::c_char,
                   __arg: __gnuc_va_list) -> ::libc::c_int;
    pub fn vscanf(__format: *const ::libc::c_char, __arg: __gnuc_va_list)
     -> ::libc::c_int;
    pub fn vsscanf(__s: *const ::libc::c_char,
                   __format: *const ::libc::c_char, __arg: __gnuc_va_list)
     -> ::libc::c_int;
    pub fn fgetc(__stream: *mut FILE) -> ::libc::c_int;
    pub fn getc(__stream: *mut FILE) -> ::libc::c_int;
    pub fn getchar() -> ::libc::c_int;
    pub fn getc_unlocked(__stream: *mut FILE) -> ::libc::c_int;
    pub fn getchar_unlocked() -> ::libc::c_int;
    pub fn fgetc_unlocked(__stream: *mut FILE) -> ::libc::c_int;
    pub fn fputc(__c: ::libc::c_int, __stream: *mut FILE) -> ::libc::c_int;
    pub fn putc(__c: ::libc::c_int, __stream: *mut FILE) -> ::libc::c_int;
    pub fn putchar(__c: ::libc::c_int) -> ::libc::c_int;
    pub fn fputc_unlocked(__c: ::libc::c_int, __stream: *mut FILE)
     -> ::libc::c_int;
    pub fn putc_unlocked(__c: ::libc::c_int, __stream: *mut FILE)
     -> ::libc::c_int;
    pub fn putchar_unlocked(__c: ::libc::c_int) -> ::libc::c_int;
    pub fn getw(__stream: *mut FILE) -> ::libc::c_int;
    pub fn putw(__w: ::libc::c_int, __stream: *mut FILE) -> ::libc::c_int;
    pub fn fgets(__s: *mut ::libc::c_char, __n: ::libc::c_int,
                 __stream: *mut FILE) -> *mut ::libc::c_char;
    pub fn gets(__s: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn __getdelim(__lineptr: *mut *mut ::libc::c_char, __n: *mut size_t,
                      __delimiter: ::libc::c_int, __stream: *mut FILE)
     -> __ssize_t;
    pub fn getdelim(__lineptr: *mut *mut ::libc::c_char, __n: *mut size_t,
                    __delimiter: ::libc::c_int, __stream: *mut FILE)
     -> __ssize_t;
    pub fn getline(__lineptr: *mut *mut ::libc::c_char, __n: *mut size_t,
                   __stream: *mut FILE) -> __ssize_t;
    pub fn fputs(__s: *const ::libc::c_char, __stream: *mut FILE)
     -> ::libc::c_int;
    pub fn puts(__s: *const ::libc::c_char) -> ::libc::c_int;
    pub fn ungetc(__c: ::libc::c_int, __stream: *mut FILE) -> ::libc::c_int;
    pub fn fread(__ptr: *mut ::libc::c_void, __size: size_t, __n: size_t,
                 __stream: *mut FILE) -> size_t;
    pub fn fwrite(__ptr: *const ::libc::c_void, __size: size_t, __n: size_t,
                  __s: *mut FILE) -> size_t;
    pub fn fread_unlocked(__ptr: *mut ::libc::c_void, __size: size_t,
                          __n: size_t, __stream: *mut FILE) -> size_t;
    pub fn fwrite_unlocked(__ptr: *const ::libc::c_void, __size: size_t,
                           __n: size_t, __stream: *mut FILE) -> size_t;
    pub fn fseek(__stream: *mut FILE, __off: ::libc::c_long,
                 __whence: ::libc::c_int) -> ::libc::c_int;
    pub fn ftell(__stream: *mut FILE) -> ::libc::c_long;
    pub fn rewind(__stream: *mut FILE) -> ();
    pub fn fseeko(__stream: *mut FILE, __off: __off_t,
                  __whence: ::libc::c_int) -> ::libc::c_int;
    pub fn ftello(__stream: *mut FILE) -> __off_t;
    pub fn fgetpos(__stream: *mut FILE, __pos: *mut fpos_t) -> ::libc::c_int;
    pub fn fsetpos(__stream: *mut FILE, __pos: *const fpos_t)
     -> ::libc::c_int;
    pub fn clearerr(__stream: *mut FILE) -> ();
    pub fn feof(__stream: *mut FILE) -> ::libc::c_int;
    pub fn ferror(__stream: *mut FILE) -> ::libc::c_int;
    pub fn clearerr_unlocked(__stream: *mut FILE) -> ();
    pub fn feof_unlocked(__stream: *mut FILE) -> ::libc::c_int;
    pub fn ferror_unlocked(__stream: *mut FILE) -> ::libc::c_int;
    pub fn perror(__s: *const ::libc::c_char) -> ();
    pub fn fileno(__stream: *mut FILE) -> ::libc::c_int;
    pub fn fileno_unlocked(__stream: *mut FILE) -> ::libc::c_int;
    pub fn popen(__command: *const ::libc::c_char,
                 __modes: *const ::libc::c_char) -> *mut FILE;
    pub fn pclose(__stream: *mut FILE) -> ::libc::c_int;
    pub fn ctermid(__s: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn flockfile(__stream: *mut FILE) -> ();
    pub fn ftrylockfile(__stream: *mut FILE) -> ::libc::c_int;
    pub fn funlockfile(__stream: *mut FILE) -> ();
    pub fn imaxabs(__n: intmax_t) -> intmax_t;
    pub fn imaxdiv(__numer: intmax_t, __denom: intmax_t) -> imaxdiv_t;
    pub fn strtoimax(__nptr: *const ::libc::c_char,
                     __endptr: *mut *mut ::libc::c_char,
                     __base: ::libc::c_int) -> intmax_t;
    pub fn strtoumax(__nptr: *const ::libc::c_char,
                     __endptr: *mut *mut ::libc::c_char,
                     __base: ::libc::c_int) -> uintmax_t;
    pub fn wcstoimax(__nptr: *const __gwchar_t,
                     __endptr: *mut *mut __gwchar_t, __base: ::libc::c_int)
     -> intmax_t;
    pub fn wcstoumax(__nptr: *const __gwchar_t,
                     __endptr: *mut *mut __gwchar_t, __base: ::libc::c_int)
     -> uintmax_t;
    pub fn select(__nfds: ::libc::c_int, __readfds: *mut fd_set,
                  __writefds: *mut fd_set, __exceptfds: *mut fd_set,
                  __timeout: *mut Struct_timeval) -> ::libc::c_int;
    pub fn pselect(__nfds: ::libc::c_int, __readfds: *mut fd_set,
                   __writefds: *mut fd_set, __exceptfds: *mut fd_set,
                   __timeout: *const Struct_timespec,
                   __sigmask: *const __sigset_t) -> ::libc::c_int;
    pub fn gnu_dev_major(__dev: ::libc::c_ulonglong) -> ::libc::c_uint;
    pub fn gnu_dev_minor(__dev: ::libc::c_ulonglong) -> ::libc::c_uint;
    pub fn gnu_dev_makedev(__major: ::libc::c_uint, __minor: ::libc::c_uint)
     -> ::libc::c_ulonglong;
    pub fn rd_kafka_version() -> ::libc::c_int;
    pub fn rd_kafka_version_str() -> *const ::libc::c_char;
    pub fn rd_kafka_err2str(err: rd_kafka_resp_err_t)
     -> *const ::libc::c_char;
    pub fn rd_kafka_errno2err(errnox: ::libc::c_int) -> rd_kafka_resp_err_t;
    pub fn rd_kafka_message_destroy(rkmessage: *mut rd_kafka_message_t) -> ();
    pub fn rd_kafka_conf_new() -> *mut rd_kafka_conf_t;
    pub fn rd_kafka_conf_destroy(conf: *mut rd_kafka_conf_t) -> ();
    pub fn rd_kafka_conf_dup(conf: *const rd_kafka_conf_t)
     -> *mut rd_kafka_conf_t;
    pub fn rd_kafka_conf_set(conf: *mut rd_kafka_conf_t,
                             name: *const ::libc::c_char,
                             value: *const ::libc::c_char,
                             errstr: *mut ::libc::c_char, errstr_size: size_t)
     -> rd_kafka_conf_res_t;
    pub fn rd_kafka_conf_set_dr_cb(conf: *mut rd_kafka_conf_t,
                                   dr_cb:
                                       ::std::option::Option<extern "C" fn
                                                                 (rk:
                                                                      *mut rd_kafka_t,
                                                                  payload:
                                                                      *mut ::libc::c_void,
                                                                  len: size_t,
                                                                  err:
                                                                      rd_kafka_resp_err_t,
                                                                  opaque:
                                                                      *mut ::libc::c_void,
                                                                  msg_opaque:
                                                                      *mut ::libc::c_void)
                                                                 -> ()>)
     -> ();
    pub fn rd_kafka_conf_set_dr_msg_cb(conf: *mut rd_kafka_conf_t,
                                       dr_msg_cb:
                                           ::std::option::Option<extern "C" fn
                                                                     (rk:
                                                                          *mut rd_kafka_t,
                                                                      rkmessage:
                                                                          *const rd_kafka_message_t,
                                                                      opaque:
                                                                          *mut ::libc::c_void)
                                                                     -> ()>)
     -> ();
    pub fn rd_kafka_conf_set_error_cb(conf: *mut rd_kafka_conf_t,
                                      error_cb:
                                          ::std::option::Option<extern "C" fn
                                                                    (rk:
                                                                         *mut rd_kafka_t,
                                                                     err:
                                                                         ::libc::c_int,
                                                                     reason:
                                                                         *const ::libc::c_char,
                                                                     opaque:
                                                                         *mut ::libc::c_void)
                                                                    -> ()>)
     -> ();
    pub fn rd_kafka_conf_set_log_cb(conf: *mut rd_kafka_conf_t,
                                    log_cb:
                                        ::std::option::Option<extern "C" fn
                                                                  (rk:
                                                                       *const rd_kafka_t,
                                                                   level:
                                                                       ::libc::c_int,
                                                                   fac:
                                                                       *const ::libc::c_char,
                                                                   buf:
                                                                       *const ::libc::c_char)
                                                                  -> ()>)
     -> ();
    pub fn rd_kafka_conf_set_stats_cb(conf: *mut rd_kafka_conf_t,
                                      stats_cb:
                                          ::std::option::Option<extern "C" fn
                                                                    (rk:
                                                                         *mut rd_kafka_t,
                                                                     json:
                                                                         *mut ::libc::c_char,
                                                                     json_len:
                                                                         size_t,
                                                                     opaque:
                                                                         *mut ::libc::c_void)
                                                                    ->
                                                                        ::libc::c_int>)
     -> ();
    pub fn rd_kafka_conf_set_socket_cb(conf: *mut rd_kafka_conf_t,
                                       socket_cb:
                                           ::std::option::Option<extern "C" fn
                                                                     (domain:
                                                                          ::libc::c_int,
                                                                      _type:
                                                                          ::libc::c_int,
                                                                      protocol:
                                                                          ::libc::c_int,
                                                                      opaque:
                                                                          *mut ::libc::c_void)
                                                                     ->
                                                                         ::libc::c_int>)
     -> ();
    pub fn rd_kafka_conf_set_open_cb(conf: *mut rd_kafka_conf_t,
                                     open_cb:
                                         ::std::option::Option<extern "C" fn
                                                                   (pathname:
                                                                        *const ::libc::c_char,
                                                                    flags:
                                                                        ::libc::c_int,
                                                                    mode:
                                                                        mode_t,
                                                                    opaque:
                                                                        *mut ::libc::c_void)
                                                                   ->
                                                                       ::libc::c_int>)
     -> ();
    pub fn rd_kafka_conf_set_opaque(conf: *mut rd_kafka_conf_t,
                                    opaque: *mut ::libc::c_void) -> ();
    pub fn rd_kafka_opaque(rk: *const rd_kafka_t) -> *mut ::libc::c_void;
    pub fn rd_kafka_conf_dump(conf: *mut rd_kafka_conf_t, cntp: *mut size_t)
     -> *mut *const ::libc::c_char;
    pub fn rd_kafka_topic_conf_dump(conf: *mut rd_kafka_topic_conf_t,
                                    cntp: *mut size_t)
     -> *mut *const ::libc::c_char;
    pub fn rd_kafka_conf_dump_free(arr: *mut *const ::libc::c_char,
                                   cnt: size_t) -> ();
    pub fn rd_kafka_conf_properties_show(fp: *mut FILE) -> ();
    pub fn rd_kafka_topic_conf_new() -> *mut rd_kafka_topic_conf_t;
    pub fn rd_kafka_topic_conf_dup(conf: *const rd_kafka_topic_conf_t)
     -> *mut rd_kafka_topic_conf_t;
    pub fn rd_kafka_topic_conf_destroy(topic_conf: *mut rd_kafka_topic_conf_t)
     -> ();
    pub fn rd_kafka_topic_conf_set(conf: *mut rd_kafka_topic_conf_t,
                                   name: *const ::libc::c_char,
                                   value: *const ::libc::c_char,
                                   errstr: *mut ::libc::c_char,
                                   errstr_size: size_t)
     -> rd_kafka_conf_res_t;
    pub fn rd_kafka_topic_conf_set_opaque(conf: *mut rd_kafka_topic_conf_t,
                                          opaque: *mut ::libc::c_void) -> ();
    pub fn rd_kafka_topic_conf_set_partitioner_cb(topic_conf:
                                                      *mut rd_kafka_topic_conf_t,
                                                  partitioner:
                                                      ::std::option::Option<extern "C" fn
                                                                                (rkt:
                                                                                     *const rd_kafka_topic_t,
                                                                                 keydata:
                                                                                     *const ::libc::c_void,
                                                                                 keylen:
                                                                                     size_t,
                                                                                 partition_cnt:
                                                                                     int32_t,
                                                                                 rkt_opaque:
                                                                                     *mut ::libc::c_void,
                                                                                 msg_opaque:
                                                                                     *mut ::libc::c_void)
                                                                                ->
                                                                                    int32_t>)
     -> ();
    pub fn rd_kafka_topic_partition_available(rkt: *const rd_kafka_topic_t,
                                              partition: int32_t)
     -> ::libc::c_int;
    pub fn rd_kafka_msg_partitioner_random(rkt: *const rd_kafka_topic_t,
                                           key: *const ::libc::c_void,
                                           keylen: size_t,
                                           partition_cnt: int32_t,
                                           opaque: *mut ::libc::c_void,
                                           msg_opaque: *mut ::libc::c_void)
     -> int32_t;
    pub fn rd_kafka_new(_type: rd_kafka_type_t, conf: *mut rd_kafka_conf_t,
                        errstr: *mut ::libc::c_char, errstr_size: size_t)
     -> *mut rd_kafka_t;
    pub fn rd_kafka_destroy(rk: *mut rd_kafka_t) -> ();
    pub fn rd_kafka_name(rk: *const rd_kafka_t) -> *const ::libc::c_char;
    pub fn rd_kafka_topic_new(rk: *mut rd_kafka_t,
                              topic: *const ::libc::c_char,
                              conf: *mut rd_kafka_topic_conf_t)
     -> *mut rd_kafka_topic_t;
    pub fn rd_kafka_topic_destroy(rkt: *mut rd_kafka_topic_t) -> ();
    pub fn rd_kafka_topic_name(rkt: *const rd_kafka_topic_t)
     -> *const ::libc::c_char;
    pub fn rd_kafka_queue_new(rk: *mut rd_kafka_t) -> *mut rd_kafka_queue_t;
    pub fn rd_kafka_queue_destroy(rkqu: *mut rd_kafka_queue_t) -> ();
    pub fn rd_kafka_consume_start(rkt: *mut rd_kafka_topic_t,
                                  partition: int32_t, offset: int64_t)
     -> ::libc::c_int;
    pub fn rd_kafka_consume_start_queue(rkt: *mut rd_kafka_topic_t,
                                        partition: int32_t, offset: int64_t,
                                        rkqu: *mut rd_kafka_queue_t)
     -> ::libc::c_int;
    pub fn rd_kafka_consume_stop(rkt: *mut rd_kafka_topic_t,
                                 partition: int32_t) -> ::libc::c_int;
    pub fn rd_kafka_consume(rkt: *mut rd_kafka_topic_t, partition: int32_t,
                            timeout_ms: ::libc::c_int)
     -> *mut rd_kafka_message_t;
    pub fn rd_kafka_consume_batch(rkt: *mut rd_kafka_topic_t,
                                  partition: int32_t,
                                  timeout_ms: ::libc::c_int,
                                  rkmessages: *mut *mut rd_kafka_message_t,
                                  rkmessages_size: size_t) -> ssize_t;
    pub fn rd_kafka_consume_callback(rkt: *mut rd_kafka_topic_t,
                                     partition: int32_t,
                                     timeout_ms: ::libc::c_int,
                                     consume_cb:
                                         ::std::option::Option<extern "C" fn
                                                                   (rkmessage:
                                                                        *mut rd_kafka_message_t,
                                                                    opaque:
                                                                        *mut ::libc::c_void)
                                                                   -> ()>,
                                     opaque: *mut ::libc::c_void)
     -> ::libc::c_int;
    pub fn rd_kafka_consume_queue(rkqu: *mut rd_kafka_queue_t,
                                  timeout_ms: ::libc::c_int)
     -> *mut rd_kafka_message_t;
    pub fn rd_kafka_consume_batch_queue(rkqu: *mut rd_kafka_queue_t,
                                        timeout_ms: ::libc::c_int,
                                        rkmessages:
                                            *mut *mut rd_kafka_message_t,
                                        rkmessages_size: size_t) -> ssize_t;
    pub fn rd_kafka_consume_callback_queue(rkqu: *mut rd_kafka_queue_t,
                                           timeout_ms: ::libc::c_int,
                                           consume_cb:
                                               ::std::option::Option<extern "C" fn
                                                                         (rkmessage:
                                                                              *mut rd_kafka_message_t,
                                                                          opaque:
                                                                              *mut ::libc::c_void)
                                                                         ->
                                                                             ()>,
                                           opaque: *mut ::libc::c_void)
     -> ::libc::c_int;
    pub fn rd_kafka_offset_store(rkt: *mut rd_kafka_topic_t,
                                 partition: int32_t, offset: int64_t)
     -> rd_kafka_resp_err_t;
    pub fn rd_kafka_produce(rkt: *mut rd_kafka_topic_t, partitition: int32_t,
                            msgflags: ::libc::c_int,
                            payload: *mut ::libc::c_void, len: size_t,
                            key: *const ::libc::c_void, keylen: size_t,
                            msg_opaque: *mut ::libc::c_void) -> ::libc::c_int;
    pub fn rd_kafka_produce_batch(rkt: *mut rd_kafka_topic_t,
                                  partition: int32_t, msgflags: ::libc::c_int,
                                  rkmessages: *mut rd_kafka_message_t,
                                  message_cnt: ::libc::c_int)
     -> ::libc::c_int;
    pub fn rd_kafka_metadata(rk: *mut rd_kafka_t, all_topics: ::libc::c_int,
                             only_rkt: *mut rd_kafka_topic_t,
                             metadatap: *mut *const Struct_rd_kafka_metadata,
                             timeout_ms: ::libc::c_int)
     -> rd_kafka_resp_err_t;
    pub fn rd_kafka_metadata_destroy(metadata:
                                         *const Struct_rd_kafka_metadata)
     -> ();
    pub fn rd_kafka_poll(rk: *mut rd_kafka_t, timeout_ms: ::libc::c_int)
     -> ::libc::c_int;
    pub fn rd_kafka_brokers_add(rk: *mut rd_kafka_t,
                                brokerlist: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn rd_kafka_set_logger(rk: *mut rd_kafka_t,
                               func:
                                   ::std::option::Option<extern "C" fn
                                                             (rk:
                                                                  *const rd_kafka_t,
                                                              level:
                                                                  ::libc::c_int,
                                                              fac:
                                                                  *const ::libc::c_char,
                                                              buf:
                                                                  *const ::libc::c_char)
                                                             -> ()>) -> ();
    pub fn rd_kafka_set_log_level(rk: *mut rd_kafka_t, level: ::libc::c_int)
     -> ();
    pub fn rd_kafka_log_print(rk: *const rd_kafka_t, level: ::libc::c_int,
                              fac: *const ::libc::c_char,
                              buf: *const ::libc::c_char) -> ();
    pub fn rd_kafka_log_syslog(rk: *const rd_kafka_t, level: ::libc::c_int,
                               fac: *const ::libc::c_char,
                               buf: *const ::libc::c_char) -> ();
    pub fn rd_kafka_outq_len(rk: *mut rd_kafka_t) -> ::libc::c_int;
    pub fn rd_kafka_dump(fp: *mut FILE, rk: *mut rd_kafka_t) -> ();
    pub fn rd_kafka_thread_cnt() -> ::libc::c_int;
    pub fn rd_kafka_wait_destroyed(timeout_ms: ::libc::c_int)
     -> ::libc::c_int;
}
